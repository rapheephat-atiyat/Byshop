const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ContainerBuilder, Colors, MediaGalleryBuilder, MediaGalleryItemBuilder, SectionBuilder, ThumbnailBuilder, TextDisplayBuilder, ButtonBuilder, ButtonStyle, SeparatorBuilder, SeparatorSpacingSize, ModalBuilder, LabelBuilder, TextInputBuilder, TextInputStyle } = require("discord.js");
const Logger = require("../Structures/Logger");
const Byshop = require("../Structures/Byshop");
const QRPayment = require("../Structures/QRPayment");
const { Truemoney } = require("../Structures/Truemoney");
const { TOTAL_PRICE, Emoji } = require("../config/config.json");

const byshop = new Byshop();
const qrpayment = new QRPayment();
const truemoney = new Truemoney();

/** @param {import("../Structures/Bot")} client */
module.exports = (client) => {
    client.on("interactionCreate", async (interaction) => {
        if (interaction.isStringSelectMenu() && interaction.customId === "category") {
            await interaction.deferUpdate();
            const selected = interaction.values[0];

            const products = await byshop.getProduct({ category: selected });
            if (products.length === 0) return interaction.followUp({ content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ", flags: ["Ephemeral"] });

            const embed = new EmbedBuilder()
                .setColor("Aqua")
                .setTitle(`‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${products[0].category}`)
                .setDescription("> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ\n *‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô*")
                .setThumbnail(`https://images.weserv.nl/?url=${encodeURIComponent(products[0].img.replace(/^https?:\/\//, ""))}`)
                .setFooter({ text: "Made by: Rapheephat Aiyat", iconURL: `https://images.weserv.nl/?url=${encodeURIComponent(products[0].img.replace(/^https?:\/\//, ""))}` });

            const options = products.map(p => {
                return {
                    label: p.name,
                    emoji: Emoji[p.category] || "‚ùî",
                    description: `‡∏£‡∏≤‡∏Ñ‡∏≤: ${TOTAL_PRICE[p.id]} ‡∏ö‡∏≤‡∏ó`,
                    value: p.id.toString(),
                }
            })

            const component = new ActionRowBuilder()
                .addComponents(
                    new StringSelectMenuBuilder()
                        .setCustomId("product")
                        .setPlaceholder("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..")
                        .addOptions(options)
                )
            return interaction.followUp({ embeds: [embed], components: [component], flags: ["Ephemeral"] });
        }

        if (interaction.isStringSelectMenu() && interaction.customId === "product") {
            await interaction.deferUpdate();
            const id = interaction.values[0];

            const product = await byshop.getProduct({ id: id });
            if (product.length === 0) return interaction.followUp({ content: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ", flags: ["Ephemeral"] });

            const container = new ContainerBuilder()
                .setAccentColor(product[0].stock == 0 ? Colors.Red : Colors.Aqua)
                .addSectionComponents(
                    new SectionBuilder()
                        .setThumbnailAccessory(
                            new ThumbnailBuilder()
                                .setURL(`https://images.weserv.nl/?url=${encodeURIComponent(product[0].img.replace(/^https?:\/\//, ""))}`)
                        )
                        .addTextDisplayComponents(
                            new TextDisplayBuilder().setContent(`# ${product[0].name}`),
                            new TextDisplayBuilder().setContent(product[0].stock == 0 ? "üòÖ *‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î*" : `üòÅ *‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product[0].stock}*`),
                            new TextDisplayBuilder().setContent(`- *‡∏£‡∏≤‡∏Ñ‡∏≤ \`${TOTAL_PRICE[id]}\` ‡∏ö‡∏≤‡∏ó*\n*-‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á-*`),
                        )
                )
                .addActionRowComponents(
                    new ActionRowBuilder()
                        .addComponents(
                            new StringSelectMenuBuilder()
                                .setCustomId("payment")
                                .setDisabled(product[0].stock == 0)
                                .setPlaceholder("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
                                .addOptions(
                                    {
                                        label: "Truemoney wallet (‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤)",
                                        description: "‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°",
                                        value: `${id};truewallet`
                                    },
                                    {
                                        label: "QR PromptPay (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå)",
                                        description: "‡∏ü‡∏£‡∏µ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°",
                                        value: `${id};qrpromtpay`
                                    },
                                    {
                                        label: "Slip (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏•‡∏¥‡∏õ)",
                                        description: "‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ",
                                        value: `${id};slip`
                                    },
                                ),
                        ),
                )

            interaction.editReply({ embeds: [], components: [container], flags: ["IsComponentsV2"] })
        }

        if (interaction.isStringSelectMenu() && interaction.customId === "payment") {
            const [id, method] = interaction.values[0].split(";");

            if (method === "qrpromtpay") {
                await interaction.deferUpdate();
                const res = await qrpayment.createTransaction({ userId: interaction.user.id, baseAmount: TOTAL_PRICE[id] });
                if (!res.success);

                const container = new ContainerBuilder()
                    .setAccentColor(Colors.DarkBlue)
                    .addMediaGalleryComponents(
                        new MediaGalleryBuilder()
                            .addItems(
                                new MediaGalleryItemBuilder()
                                    .setURL(res.img),
                            ),
                    )
                    .addTextDisplayComponents(
                        new TextDisplayBuilder().setContent(`‚ö†Ô∏è *‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô <t:${res.expireAtUnix}:R>*`),
                        new TextDisplayBuilder().setContent(`‚ö†Ô∏è *‡∏´‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î ‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô*`),
                    )
                    .addSeparatorComponents(
                        new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Small).setDivider(true),
                    )
                    .addActionRowComponents(
                        new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setStyle(ButtonStyle.Success)
                                    .setLabel("‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
                                    .setEmoji("‚úÖ")
                                    .setCustomId(`qr;${res.transaction};${id};confirm`),
                            ),
                    )

                interaction.editReply({ components: [container], flags: ["IsComponentsV2"] })
            }

            if (method === "truewallet") {
                const price = TOTAL_PRICE[id]
                console.log(price);

                const modal = new ModalBuilder()
                    .setCustomId(`tw;${id}`)
                    .setTitle("üßß ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤")

                const voucherInput = new LabelBuilder()
                    .setLabel("‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤")
                    .setDescription(`‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó`)
                    .setTextInputComponent(
                        new TextInputBuilder()
                            .setCustomId("voucher")
                            .setMinLength(74)
                            .setMaxLength(74)
                            .setRequired(true)
                            .setStyle(TextInputStyle.Short)
                    )

                modal.addLabelComponents(voucherInput);
                interaction.showModal(modal);
            }
        }

        if (interaction.isModalSubmit() && interaction.customId.startsWith("tw")) {
            await interaction.deferUpdate();
            const [_, id] = interaction.customId.split(";");

            const voucher = await interaction.fields.getTextInputValue("voucher");
            const success = await truemoney.redeem({ voucher, amount: TOTAL_PRICE[id] });

            if (success) {
                const itemResponse = await byshop.buyProduct({ id, userId: interaction.user.id });
                if (itemResponse.success) {
                    const container = new ContainerBuilder()
                        .setAccentColor(Colors.Aqua)
                        .addSectionComponents(
                            new SectionBuilder()
                                .setThumbnailAccessory(
                                    new ThumbnailBuilder()
                                        .setURL(`https://images.weserv.nl/?url=${encodeURIComponent(itemResponse.data.img.replace(/^https?:\/\//, ""))}`)
                                )
                                .addTextDisplayComponents(
                                    new TextDisplayBuilder().setContent(`*‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô*`),
                                    new TextDisplayBuilder().setContent(`# ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | ${itemResponse.data.orderid}`),
                                )
                        )
                        .addSeparatorComponents(
                            new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Small).setDivider(true),
                        )
                        .addTextDisplayComponents(
                            new TextDisplayBuilder().setContent(`*‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠*`),
                            new TextDisplayBuilder().setContent(`\`\`\`${itemResponse.data.info}\`\`\``),
                        )


                    return interaction.editReply({ components: [container], flags: ["IsComponentsV2"] });
                }
            }
            return interaction.followUp({ content: `‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`, flags: ["Ephemeral"] })
        }

        if (interaction.isButton() && interaction.customId.startsWith("qr")) {
            await interaction.deferUpdate();
            const [_, transaction, id, __] = interaction.customId.split(";");
            const response = await qrpayment.confirmTransaction({ transaction });
            
            if (response.success) {
                const itemResponse = await byshop.buyProduct({ id, userId: interaction.user.id });
                if (itemResponse.success) {
                    const container = new ContainerBuilder()
                        .setAccentColor(Colors.Aqua)
                        .addSectionComponents(
                            new SectionBuilder()
                                .setThumbnailAccessory(
                                    new ThumbnailBuilder()
                                        .setURL(`https://images.weserv.nl/?url=${encodeURIComponent(itemResponse.data.img.replace(/^https?:\/\//, ""))}`)
                                )
                                .addTextDisplayComponents(
                                    new TextDisplayBuilder().setContent(`*‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô*`),
                                    new TextDisplayBuilder().setContent(`# ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | ${itemResponse.data.orderid}`),
                                )
                        )
                        .addSeparatorComponents(
                            new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Small).setDivider(true),
                        )
                        .addTextDisplayComponents(
                            new TextDisplayBuilder().setContent(`*‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠*`),
                            new TextDisplayBuilder().setContent(`\`\`\`${itemResponse.data.info}\`\`\``),
                        )


                    return interaction.editReply({ components: [container], flags: ["IsComponentsV2"] });
                }
            }
        }
    });
};
